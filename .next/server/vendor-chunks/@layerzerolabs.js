/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@layerzerolabs";
exports.ids = ["vendor-chunks/@layerzerolabs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/base-x/src/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/base-x/src/index.js ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxheWVyemVyb2xhYnMvbHotdjItdXRpbGl0aWVzL25vZGVfbW9kdWxlcy9iYXNlLXgvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLDJDQUEyQztBQUMzQywrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw2Q0FBNkM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVksU0FBUztBQUNoQztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsK0JBQStCLDZDQUE2QztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3doYWxlLWJyaWRnZS8uL25vZGVfbW9kdWxlcy9AbGF5ZXJ6ZXJvbGFicy9sei12Mi11dGlsaXRpZXMvbm9kZV9tb2R1bGVzL2Jhc2UteC9zcmMvaW5kZXguanM/MTE4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbi8vIGJhc2UteCBlbmNvZGluZyAvIGRlY29kaW5nXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTggYmFzZS14IGNvbnRyaWJ1dG9yc1xuLy8gQ29weXJpZ2h0IChjKSAyMDE0LTIwMTggVGhlIEJpdGNvaW4gQ29yZSBkZXZlbG9wZXJzIChiYXNlNTguY3BwKVxuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBzb2Z0d2FyZSBsaWNlbnNlLCBzZWUgdGhlIGFjY29tcGFueWluZ1xuLy8gZmlsZSBMSUNFTlNFIG9yIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwLlxuZnVuY3Rpb24gYmFzZSAoQUxQSEFCRVQpIHtcbiAgaWYgKEFMUEhBQkVULmxlbmd0aCA+PSAyNTUpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxwaGFiZXQgdG9vIGxvbmcnKSB9XG4gIHZhciBCQVNFX01BUCA9IG5ldyBVaW50OEFycmF5KDI1NilcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBCQVNFX01BUC5sZW5ndGg7IGorKykge1xuICAgIEJBU0VfTUFQW2pdID0gMjU1XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBBTFBIQUJFVC5sZW5ndGg7IGkrKykge1xuICAgIHZhciB4ID0gQUxQSEFCRVQuY2hhckF0KGkpXG4gICAgdmFyIHhjID0geC5jaGFyQ29kZUF0KDApXG4gICAgaWYgKEJBU0VfTUFQW3hjXSAhPT0gMjU1KSB7IHRocm93IG5ldyBUeXBlRXJyb3IoeCArICcgaXMgYW1iaWd1b3VzJykgfVxuICAgIEJBU0VfTUFQW3hjXSA9IGlcbiAgfVxuICB2YXIgQkFTRSA9IEFMUEhBQkVULmxlbmd0aFxuICB2YXIgTEVBREVSID0gQUxQSEFCRVQuY2hhckF0KDApXG4gIHZhciBGQUNUT1IgPSBNYXRoLmxvZyhCQVNFKSAvIE1hdGgubG9nKDI1NikgLy8gbG9nKEJBU0UpIC8gbG9nKDI1NiksIHJvdW5kZWQgdXBcbiAgdmFyIGlGQUNUT1IgPSBNYXRoLmxvZygyNTYpIC8gTWF0aC5sb2coQkFTRSkgLy8gbG9nKDI1NikgLyBsb2coQkFTRSksIHJvdW5kZWQgdXBcbiAgZnVuY3Rpb24gZW5jb2RlIChzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHNvdXJjZSkpIHtcbiAgICAgIHNvdXJjZSA9IG5ldyBVaW50OEFycmF5KHNvdXJjZS5idWZmZXIsIHNvdXJjZS5ieXRlT2Zmc2V0LCBzb3VyY2UuYnl0ZUxlbmd0aClcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gVWludDhBcnJheS5mcm9tKHNvdXJjZSlcbiAgICB9XG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgVWludDhBcnJheScpIH1cbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJycgfVxuICAgICAgICAvLyBTa2lwICYgY291bnQgbGVhZGluZyB6ZXJvZXMuXG4gICAgdmFyIHplcm9lcyA9IDBcbiAgICB2YXIgbGVuZ3RoID0gMFxuICAgIHZhciBwYmVnaW4gPSAwXG4gICAgdmFyIHBlbmQgPSBzb3VyY2UubGVuZ3RoXG4gICAgd2hpbGUgKHBiZWdpbiAhPT0gcGVuZCAmJiBzb3VyY2VbcGJlZ2luXSA9PT0gMCkge1xuICAgICAgcGJlZ2luKytcbiAgICAgIHplcm9lcysrXG4gICAgfVxuICAgICAgICAvLyBBbGxvY2F0ZSBlbm91Z2ggc3BhY2UgaW4gYmlnLWVuZGlhbiBiYXNlNTggcmVwcmVzZW50YXRpb24uXG4gICAgdmFyIHNpemUgPSAoKHBlbmQgLSBwYmVnaW4pICogaUZBQ1RPUiArIDEpID4+PiAwXG4gICAgdmFyIGI1OCA9IG5ldyBVaW50OEFycmF5KHNpemUpXG4gICAgICAgIC8vIFByb2Nlc3MgdGhlIGJ5dGVzLlxuICAgIHdoaWxlIChwYmVnaW4gIT09IHBlbmQpIHtcbiAgICAgIHZhciBjYXJyeSA9IHNvdXJjZVtwYmVnaW5dXG4gICAgICAgICAgICAvLyBBcHBseSBcImI1OCA9IGI1OCAqIDI1NiArIGNoXCIuXG4gICAgICB2YXIgaSA9IDBcbiAgICAgIGZvciAodmFyIGl0MSA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgKGl0MSAhPT0gLTEpOyBpdDEtLSwgaSsrKSB7XG4gICAgICAgIGNhcnJ5ICs9ICgyNTYgKiBiNThbaXQxXSkgPj4+IDBcbiAgICAgICAgYjU4W2l0MV0gPSAoY2FycnkgJSBCQVNFKSA+Pj4gMFxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpID4+PiAwXG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHsgdGhyb3cgbmV3IEVycm9yKCdOb24temVybyBjYXJyeScpIH1cbiAgICAgIGxlbmd0aCA9IGlcbiAgICAgIHBiZWdpbisrXG4gICAgfVxuICAgICAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzIGluIGJhc2U1OCByZXN1bHQuXG4gICAgdmFyIGl0MiA9IHNpemUgLSBsZW5ndGhcbiAgICB3aGlsZSAoaXQyICE9PSBzaXplICYmIGI1OFtpdDJdID09PSAwKSB7XG4gICAgICBpdDIrK1xuICAgIH1cbiAgICAgICAgLy8gVHJhbnNsYXRlIHRoZSByZXN1bHQgaW50byBhIHN0cmluZy5cbiAgICB2YXIgc3RyID0gTEVBREVSLnJlcGVhdCh6ZXJvZXMpXG4gICAgZm9yICg7IGl0MiA8IHNpemU7ICsraXQyKSB7IHN0ciArPSBBTFBIQUJFVC5jaGFyQXQoYjU4W2l0Ml0pIH1cbiAgICByZXR1cm4gc3RyXG4gIH1cbiAgZnVuY3Rpb24gZGVjb2RlVW5zYWZlIChzb3VyY2UpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3N0cmluZycpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgU3RyaW5nJykgfVxuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSB7IHJldHVybiBuZXcgVWludDhBcnJheSgpIH1cbiAgICB2YXIgcHN6ID0gMFxuICAgICAgICAvLyBTa2lwIGFuZCBjb3VudCBsZWFkaW5nICcxJ3MuXG4gICAgdmFyIHplcm9lcyA9IDBcbiAgICB2YXIgbGVuZ3RoID0gMFxuICAgIHdoaWxlIChzb3VyY2VbcHN6XSA9PT0gTEVBREVSKSB7XG4gICAgICB6ZXJvZXMrK1xuICAgICAgcHN6KytcbiAgICB9XG4gICAgICAgIC8vIEFsbG9jYXRlIGVub3VnaCBzcGFjZSBpbiBiaWctZW5kaWFuIGJhc2UyNTYgcmVwcmVzZW50YXRpb24uXG4gICAgdmFyIHNpemUgPSAoKChzb3VyY2UubGVuZ3RoIC0gcHN6KSAqIEZBQ1RPUikgKyAxKSA+Pj4gMCAvLyBsb2coNTgpIC8gbG9nKDI1NiksIHJvdW5kZWQgdXAuXG4gICAgdmFyIGIyNTYgPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgICAvLyBQcm9jZXNzIHRoZSBjaGFyYWN0ZXJzLlxuICAgIHdoaWxlIChzb3VyY2VbcHN6XSkge1xuICAgICAgICAgICAgLy8gRGVjb2RlIGNoYXJhY3RlclxuICAgICAgdmFyIGNhcnJ5ID0gQkFTRV9NQVBbc291cmNlLmNoYXJDb2RlQXQocHN6KV1cbiAgICAgICAgICAgIC8vIEludmFsaWQgY2hhcmFjdGVyXG4gICAgICBpZiAoY2FycnkgPT09IDI1NSkgeyByZXR1cm4gfVxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKHZhciBpdDMgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIChpdDMgIT09IC0xKTsgaXQzLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoQkFTRSAqIGIyNTZbaXQzXSkgPj4+IDBcbiAgICAgICAgYjI1NltpdDNdID0gKGNhcnJ5ICUgMjU2KSA+Pj4gMFxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIDI1NikgPj4+IDBcbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vbi16ZXJvIGNhcnJ5JykgfVxuICAgICAgbGVuZ3RoID0gaVxuICAgICAgcHN6KytcbiAgICB9XG4gICAgICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXMgaW4gYjI1Ni5cbiAgICB2YXIgaXQ0ID0gc2l6ZSAtIGxlbmd0aFxuICAgIHdoaWxlIChpdDQgIT09IHNpemUgJiYgYjI1NltpdDRdID09PSAwKSB7XG4gICAgICBpdDQrK1xuICAgIH1cbiAgICB2YXIgdmNoID0gbmV3IFVpbnQ4QXJyYXkoemVyb2VzICsgKHNpemUgLSBpdDQpKVxuICAgIHZhciBqID0gemVyb2VzXG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSkge1xuICAgICAgdmNoW2orK10gPSBiMjU2W2l0NCsrXVxuICAgIH1cbiAgICByZXR1cm4gdmNoXG4gIH1cbiAgZnVuY3Rpb24gZGVjb2RlIChzdHJpbmcpIHtcbiAgICB2YXIgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZylcbiAgICBpZiAoYnVmZmVyKSB7IHJldHVybiBidWZmZXIgfVxuICAgIHRocm93IG5ldyBFcnJvcignTm9uLWJhc2UnICsgQkFTRSArICcgY2hhcmFjdGVyJylcbiAgfVxuICByZXR1cm4ge1xuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGRlY29kZVVuc2FmZTogZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gYmFzZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/base-x/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/bs58/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/bs58/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const basex = __webpack_require__(/*! base-x */ \"(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/base-x/src/index.js\")\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxheWVyemVyb2xhYnMvbHotdjItdXRpbGl0aWVzL25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxvR0FBUTtBQUM5Qjs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3doYWxlLWJyaWRnZS8uL25vZGVfbW9kdWxlcy9AbGF5ZXJ6ZXJvbGFicy9sei12Mi11dGlsaXRpZXMvbm9kZV9tb2R1bGVzL2JzNTgvaW5kZXguanM/YTAyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNleCA9IHJlcXVpcmUoJ2Jhc2UteCcpXG5jb25zdCBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2V4KEFMUEhBQkVUKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/bs58/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/dist/index.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@layerzerolabs/lz-v2-utilities/dist/index.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar address = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib.esm/index.js\");\nvar bytes = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\nvar base58 = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/node_modules/bs58/index.js\");\nvar abi = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib.esm/index.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nvar solidity = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/@ethersproject/solidity/lib.esm/index.js\");\nvar invariant = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/tiny-invariant/dist/tiny-invariant.cjs.js\");\nvar keccak256 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }\n\nvar base58__default = /*#__PURE__*/_interopDefault(base58);\nvar invariant__default = /*#__PURE__*/_interopDefault(invariant);\n\n// src/utils/hex.ts\nfunction hexZeroPadTo32(addr) {\n  return bytes.hexZeroPad(addr, 32);\n}\nfunction bytes32ToEthAddress(bytes32) {\n  if (bytes32 instanceof Uint8Array) {\n    bytes32 = bytes.hexlify(bytes32);\n  }\n  return address.getAddress(bytes32.slice(-40));\n}\nfunction trim0x(str) {\n  return str.replace(/^0x/, \"\");\n}\nfunction addressToBytes32(address) {\n  if (isSolanaAddress(address)) {\n    return base58__default.default.decode(address);\n  } else if (address.startsWith(\"0x\") && address.length <= 66) {\n    return bytes.arrayify(hexZeroPadTo32(address));\n  }\n  throw new Error(\"Invalid address\");\n}\nvar solanaAddressRegex = /^([1-9A-HJ-NP-Za-km-z]{32,44})$/;\nfunction isSolanaAddress(address) {\n  return solanaAddressRegex.test(address);\n}\n\n// src/utils/precrime.ts\nvar CONFIG_VERSION_OFFSET = 0;\nvar MAX_BATCH_SIZE_OFFSET = 2;\nvar NUMBER_OF_PEERS_OFFSET = 10;\nvar PEERS_OFFSET = 12;\nfunction parsePrecrimeConfig(precrimeConfig) {\n  const data = trim0x(precrimeConfig);\n  const version = parseInt(data.slice(0, 4), 16);\n  if (version === 1) {\n    return parsePrecrimeConfigV1(precrimeConfig);\n  } else if (version === 2) {\n    return parsePrecrimeConfigV2(precrimeConfig);\n  }\n  throw new Error(`Unsupported precrime config version: ${version}`);\n}\nfunction parsePrecrimeConfigV1(precrimeConfig) {\n  const data = trim0x(precrimeConfig);\n  const version = parseInt(data.slice(0, 4), 16);\n  const maxBatchSize = parseInt(data.slice(4, 20), 16);\n  const remoteChainsLength = parseInt(data.slice(20, 84), 16);\n  const remoteChainsBytes = data.slice(84, 84 + remoteChainsLength * 64);\n  const remoteAddressesBytes = data.slice(\n    84 + remoteChainsLength * 64,\n    84 + remoteChainsLength * 64 + remoteChainsLength * 64\n  );\n  const remoteChainsBytesArray = [];\n  const remoteAddressesBytesArray = [];\n  let start = 0;\n  let end = 64;\n  for (let i = 0; i < remoteChainsLength; i++) {\n    remoteChainsBytesArray.push(parseInt(remoteChainsBytes.slice(start, end), 16));\n    remoteAddressesBytesArray.push(`0x${remoteAddressesBytes.slice(start, end)}`);\n    start += 64;\n    end += 64;\n  }\n  return { version, maxBatchSize, remoteEids: remoteChainsBytesArray, remoteAddresses: remoteAddressesBytesArray };\n}\nfunction parsePrecrimeConfigV2(precrimeConfig) {\n  const buffer = Buffer.from(trim0x(precrimeConfig), \"hex\");\n  const version = buffer.readUInt16BE(CONFIG_VERSION_OFFSET);\n  const maxBatchSize = buffer.readBigUint64BE(MAX_BATCH_SIZE_OFFSET);\n  const peers = new Array();\n  if (buffer.length > NUMBER_OF_PEERS_OFFSET) {\n    const numOfPeers = buffer.readUInt16BE(NUMBER_OF_PEERS_OFFSET);\n    for (let i = 0; i < numOfPeers; i++) {\n      const offset = PEERS_OFFSET + i * (4 + 2 * 32);\n      const eid = buffer.readUInt32BE(offset);\n      const preCrimeAddress = \"0x\" + buffer.slice(offset + 4, offset + 4 + 32).toString(\"hex\");\n      const oappAddress = \"0x\" + buffer.slice(offset + 4 + 32, offset + 4 + 32 + 32).toString(\"hex\");\n      peers.push({\n        eid,\n        preCrimeAddress,\n        oappAddress\n      });\n    }\n  }\n  return {\n    version,\n    maxBatchSize,\n    peers\n  };\n}\nvar parseError = (errorData, intf) => {\n  const buildInError = parseBuildInError(errorData);\n  if (buildInError !== void 0) {\n    return buildInError;\n  }\n  if (intf) {\n    try {\n      return intf.parseError(errorData);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n};\nfunction parseBuildInError(errorData) {\n  if (errorData.startsWith(\"0x08c379a0\")) {\n    const content = `0x${errorData.substring(10)}`;\n    const reason = abi.defaultAbiCoder.decode([\"string\"], content);\n    return reason[0];\n  }\n  if (errorData.startsWith(\"0x4e487b71\")) {\n    const content = `0x${errorData.substring(10)}`;\n    const code = abi.defaultAbiCoder.decode([\"uint\"], content);\n    return code[0];\n  }\n  if (errorData === \"0x\") {\n    return \"\";\n  }\n  return void 0;\n}\nvar OptionType = /* @__PURE__ */ ((OptionType2) => {\n  OptionType2[OptionType2[\"TYPE_1\"] = 1] = \"TYPE_1\";\n  OptionType2[OptionType2[\"TYPE_2\"] = 2] = \"TYPE_2\";\n  OptionType2[OptionType2[\"TYPE_3\"] = 3] = \"TYPE_3\";\n  return OptionType2;\n})(OptionType || {});\nvar MAX_UINT_128 = bignumber.BigNumber.from(\"0xffffffffffffffffffffffffffffffff\");\nfunction optionsType1(_extraGas) {\n  const extraGas = bignumber.BigNumber.from(_extraGas);\n  invariant__default.default(extraGas.lte(MAX_UINT_128), \"extraGas should be less than MAX_UINT_128\");\n  return solidity.pack([\"uint16\", \"uint256\"], [1 /* TYPE_1 */, extraGas]);\n}\nfunction optionsType2(_extraGas, _dstNativeAmt, _dstNativeAddress) {\n  const extraGas = bignumber.BigNumber.from(_extraGas);\n  invariant__default.default(extraGas.lte(MAX_UINT_128), \"extraGas should be less than MAX_UINT_128\");\n  const dstNativeAmt = bignumber.BigNumber.from(_dstNativeAmt);\n  invariant__default.default(dstNativeAmt.lte(MAX_UINT_128), \"dstNativeAmt should be less than MAX_UINT_128\");\n  return solidity.pack(\n    [\"uint16\", \"uint256\", \"uint256\", \"bytes\"],\n    [2 /* TYPE_2 */, bignumber.BigNumber.from(extraGas), bignumber.BigNumber.from(dstNativeAmt), _dstNativeAddress]\n  );\n}\nvar WorkerId = /* @__PURE__ */ ((WorkerId2) => {\n  WorkerId2[WorkerId2[\"EXECUTOR\"] = 1] = \"EXECUTOR\";\n  WorkerId2[WorkerId2[\"VERIFIER\"] = 2] = \"VERIFIER\";\n  WorkerId2[WorkerId2[\"TREASURY\"] = 255] = \"TREASURY\";\n  return WorkerId2;\n})(WorkerId || {});\nvar ExecutorOptionType = /* @__PURE__ */ ((ExecutorOptionType2) => {\n  ExecutorOptionType2[ExecutorOptionType2[\"LZ_RECEIVE\"] = 1] = \"LZ_RECEIVE\";\n  ExecutorOptionType2[ExecutorOptionType2[\"NATIVE_DROP\"] = 2] = \"NATIVE_DROP\";\n  ExecutorOptionType2[ExecutorOptionType2[\"COMPOSE\"] = 3] = \"COMPOSE\";\n  ExecutorOptionType2[ExecutorOptionType2[\"ORDERED\"] = 4] = \"ORDERED\";\n  return ExecutorOptionType2;\n})(ExecutorOptionType || {});\nvar VerifierOptionType = /* @__PURE__ */ ((VerifierOptionType2) => {\n  VerifierOptionType2[VerifierOptionType2[\"PRECRIME\"] = 1] = \"PRECRIME\";\n  return VerifierOptionType2;\n})(VerifierOptionType || {});\nvar Options = class _Options {\n  workerOptions = [];\n  // dissuade public instantiation\n  constructor() {\n  }\n  /**\n   * Create a new options instance.\n   */\n  static newOptions() {\n    return new _Options();\n  }\n  /**\n   * Create an options instance from a hex string.\n   * @param {string} optionsHex The hex string to decode.\n   */\n  static fromOptions(optionsHex) {\n    const options = new _Options();\n    const optionsBytes = bytes.arrayify(optionsHex);\n    const optionsType = bignumber.BigNumber.from(optionsBytes.slice(0, 2)).toNumber();\n    if (optionsType === 3 /* TYPE_3 */) {\n      let cursor = 2;\n      while (cursor < optionsBytes.byteLength) {\n        const workerId = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n        cursor += 1;\n        const size = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 2)).toNumber();\n        cursor += 2;\n        if (workerId === 1 /* EXECUTOR */) {\n          const optionType = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n          cursor += 1;\n          const params = optionsBytes.slice(cursor, cursor + size - 1);\n          cursor += size - 1;\n          options.addOption(workerId, { type: optionType, params: bytes.hexlify(params) });\n        } else if (workerId === 2 /* VERIFIER */) {\n          const verifierIdx = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n          cursor += 1;\n          const optionType = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n          cursor += 1;\n          const params = optionsBytes.slice(cursor, cursor + size - 2);\n          cursor += size - 2;\n          const option = {\n            type: optionType,\n            index: verifierIdx,\n            params: bytes.hexlify(params)\n          };\n          options.addOption(workerId, option);\n        }\n      }\n    } else if (optionsType === 2 /* TYPE_2 */) {\n      const extraGas = bignumber.BigNumber.from(optionsBytes.slice(2, 34)).toBigInt();\n      const dstNativeAmt = bignumber.BigNumber.from(optionsBytes.slice(34, 66)).toBigInt();\n      const dstNativeAddress = bytes.hexlify(optionsBytes.slice(66, optionsBytes.byteLength));\n      options.addExecutorLzReceiveOption(extraGas).addExecutorNativeDropOption(dstNativeAmt, dstNativeAddress);\n    } else if (optionsType === 1 /* TYPE_1 */) {\n      const extraGas = bignumber.BigNumber.from(optionsBytes.slice(2, 34)).toBigInt();\n      options.addExecutorLzReceiveOption(extraGas);\n    }\n    return options;\n  }\n  /**\n   * Add ExecutorOptionType.LZ_RECEIVE option.\n   * @param {GasLimit} gasLimit\n   * @param {NativeDrop} nativeDrop\n   */\n  addExecutorLzReceiveOption(gasLimit, nativeDrop = 0) {\n    const gasLimitBN = bignumber.BigNumber.from(gasLimit);\n    invariant__default.default(gasLimitBN.lte(MAX_UINT_128), \"gasLimit shouldn't be greater than MAX_UINT_128\");\n    const nativeDropBN = bignumber.BigNumber.from(nativeDrop);\n    invariant__default.default(nativeDropBN.lte(MAX_UINT_128), \"value shouldn't be greater than MAX_UINT_128\");\n    this.addOption(1 /* EXECUTOR */, {\n      type: 1 /* LZ_RECEIVE */,\n      params: nativeDropBN.eq(0) ? solidity.pack([\"uint128\"], [gasLimitBN]) : solidity.pack([\"uint128\", \"uint128\"], [gasLimitBN, nativeDropBN])\n    });\n    return this;\n  }\n  /**\n   * Add ExecutorOptionType.NATIVE_DROP option.\n   * @param {NativeDrop} nativeDrop\n   * @param {string} receiver\n   */\n  addExecutorNativeDropOption(nativeDrop, receiver) {\n    const amountBN = bignumber.BigNumber.from(nativeDrop);\n    invariant__default.default(amountBN.lte(MAX_UINT_128), \"nativeDrop shouldn't be greater than MAX_UINT_128\");\n    this.addOption(1 /* EXECUTOR */, {\n      type: 2 /* NATIVE_DROP */,\n      params: solidity.pack([\"uint128\", \"bytes32\"], [amountBN, addressToBytes32(receiver)])\n    });\n    return this;\n  }\n  /**\n   * Add ExecutorOptionType.COMPOSE option.\n   * @param {number} index\n   * @param {GasLimit} gasLimit\n   * @param {NativeDrop} nativeDrop\n   */\n  addExecutorComposeOption(index, gasLimit, nativeDrop = 0) {\n    const gasLimitBN = bignumber.BigNumber.from(gasLimit);\n    invariant__default.default(gasLimitBN.lte(MAX_UINT_128), \"gasLimit shouldn't be greater than MAX_UINT_128\");\n    const nativeDropBN = bignumber.BigNumber.from(nativeDrop);\n    invariant__default.default(nativeDropBN.lte(MAX_UINT_128), \"nativeDrop shouldn't be greater than MAX_UINT_128\");\n    const option = nativeDropBN.gt(0) ? {\n      type: 3 /* COMPOSE */,\n      params: solidity.pack([\"uint16\", \"uint128\", \"uint128\"], [index, gasLimitBN, nativeDropBN])\n    } : {\n      type: 3 /* COMPOSE */,\n      params: solidity.pack([\"uint16\", \"uint128\"], [index, gasLimitBN])\n    };\n    this.addOption(1 /* EXECUTOR */, option);\n    return this;\n  }\n  /**\n   * Add ExecutorOptionType.ORDERED option.\n   */\n  addExecutorOrderedExecutionOption() {\n    this.addOption(1 /* EXECUTOR */, {\n      type: 4 /* ORDERED */,\n      params: \"0x\"\n    });\n    return this;\n  }\n  /**\n   * Add VerifierOptionType.PRECRIME option.\n   * @param {number} verifierIdx\n   */\n  addVerifierPrecrimeOption(verifierIdx) {\n    const option = {\n      type: 1 /* PRECRIME */,\n      index: verifierIdx,\n      params: \"0x\"\n    };\n    this.addOption(2 /* VERIFIER */, option);\n    return this;\n  }\n  /**\n   * Serialize Options to hex string.\n   */\n  toHex() {\n    let hex = solidity.pack([\"uint16\"], [3 /* TYPE_3 */]);\n    this.workerOptions.forEach((w) => {\n      for (const option of w.options) {\n        if (w.workerId === 1 /* EXECUTOR */) {\n          hex += trim0x(\n            solidity.pack(\n              [\"uint8\", \"uint16\", \"uint8\", \"bytes\"],\n              [w.workerId, trim0x(option.params).length / 2 + 1, option.type, option.params]\n            )\n          );\n        } else if (w.workerId === 2 /* VERIFIER */) {\n          const verifierOption = option;\n          hex += trim0x(\n            solidity.pack(\n              [\"uint8\", \"uint16\", \"uint8\", \"uint8\", \"bytes\"],\n              [\n                w.workerId,\n                trim0x(option.params).length / 2 + 2,\n                verifierOption.index,\n                verifierOption.type,\n                verifierOption.params\n              ]\n            )\n          );\n        }\n      }\n    });\n    return hex;\n  }\n  /**\n   * Serialize Options to Uint8Array.\n   */\n  toBytes() {\n    return bytes.arrayify(this.toHex());\n  }\n  addOption(workerId, option) {\n    const worker = this.workerOptions.find((w) => w.workerId === workerId);\n    if (worker) {\n      worker.options.push(option);\n    } else {\n      this.workerOptions.push({ workerId, options: [option] });\n    }\n  }\n  /**\n   * Decode ExecutorOptionType.LZ_RECEIVE option.  Returns undefined if the option is not present.\n   */\n  decodeExecutorLzReceiveOption() {\n    let options = this.findOptions(1 /* EXECUTOR */, 1 /* LZ_RECEIVE */);\n    if (options === void 0 || Array.isArray(options) && options.length === 0) {\n      return;\n    }\n    let totalGas = bignumber.BigNumber.from(0).toBigInt();\n    let totalValue = bignumber.BigNumber.from(0).toBigInt();\n    options = Array.isArray(options) ? options : [options];\n    for (const option of options) {\n      const buffer = Buffer.from(trim0x(option.params), \"hex\");\n      const gas = bignumber.BigNumber.from(buffer.subarray(0, 16)).toBigInt();\n      const value = bignumber.BigNumber.from(buffer.length === 16 ? 0 : buffer.subarray(16, 32)).toBigInt();\n      totalGas = totalGas + gas;\n      totalValue = totalValue + value;\n    }\n    return { gas: totalGas, value: totalValue };\n  }\n  /**\n   * Decode ExecutorOptionType.NATIVE_DROP options.  Returns undefined if the options is not present.\n   */\n  decodeExecutorNativeDropOption() {\n    const options = this.findOptions(1 /* EXECUTOR */, 2 /* NATIVE_DROP */);\n    if (!options || options.length === 0) {\n      return [];\n    }\n    const results = options.reduce((acc, cur) => {\n      const buffer = Buffer.from(trim0x(cur.params), \"hex\");\n      const amount = bignumber.BigNumber.from(buffer.subarray(0, 16)).toBigInt();\n      const receiver = bytes.hexlify(buffer.subarray(16, 48));\n      if (acc[receiver]) {\n        acc[receiver].amount = acc[receiver].amount + amount;\n      } else {\n        acc[receiver] = { amount, receiver };\n      }\n      return acc;\n    }, {});\n    return Object.values(results);\n  }\n  /**\n   * Decode ExecutorOptionType.COMPOSE options.  Returns undefined if the options is not present.\n   */\n  decodeExecutorComposeOption() {\n    const options = this.findOptions(1 /* EXECUTOR */, 3 /* COMPOSE */);\n    if (!options || options.length === 0) {\n      return [];\n    }\n    const results = options.reduce(\n      (acc, cur) => {\n        const buffer = Buffer.from(trim0x(cur.params), \"hex\");\n        const index = bignumber.BigNumber.from(buffer.subarray(0, 2)).toNumber();\n        const gas = bignumber.BigNumber.from(buffer.subarray(2, 18)).toBigInt();\n        const value = (buffer.length === 34 ? bignumber.BigNumber.from(buffer.subarray(18, 34)) : bignumber.BigNumber.from(0)).toBigInt();\n        if (acc[index]) {\n          acc[index].gas = acc[index].gas + gas;\n          acc[index].value = acc[index].value + value;\n        } else {\n          acc[index] = { index, gas, value };\n        }\n        return acc;\n      },\n      {}\n    );\n    return Object.values(results);\n  }\n  /**\n   * Decode ExecutorOptionType.ORDERED options.  Returns undefined if the options is not present.\n   */\n  decodeExecutorOrderedExecutionOption() {\n    const option = this.findOptions(1 /* EXECUTOR */, 4 /* ORDERED */);\n    return option !== void 0;\n  }\n  findOptions(workerId, optionType) {\n    const worker = this.workerOptions.find((w) => w.workerId === workerId);\n    if (worker) {\n      if (optionType === 4 /* ORDERED */) {\n        return worker.options.find((o) => o.type === optionType);\n      }\n      return worker.options.filter((o) => o.type === optionType);\n    }\n  }\n  /**\n   * Find VerifierOption by verifierIdx and optionType.  Returns undefined if the option is not present.\n   * @param {number} verifierIdx\n   * @param {number} optionType\n   */\n  findVerifierOption(verifierIdx, optionType) {\n    const worker = this.workerOptions.find((w) => w.workerId === 2 /* VERIFIER */);\n    if (worker) {\n      const opt = worker.options.find((o) => o.type === optionType && o.index === verifierIdx);\n      if (opt) {\n        return opt;\n      }\n    }\n  }\n};\n\n// src/model/packet.ts\nfunction packetToMessageOrigin(packet) {\n  return {\n    srcEid: packet.srcEid,\n    sender: packet.sender,\n    nonce: packet.nonce\n  };\n}\nvar PACKET_VERSION_OFFSET = 0;\nvar NONCE_OFFSET = 1;\nvar SRC_CHAIN_OFFSET = 9;\nvar SRC_ADDRESS_OFFSET = 13;\nvar DST_CHAIN_OFFSET = 45;\nvar DST_ADDRESS_OFFSET = 49;\nvar GUID_OFFSET = 81;\nvar MESSAGE_OFFSET = 113;\nvar PacketV1Codec = class _PacketV1Codec {\n  buffer;\n  static from(payloadEncoded) {\n    return new _PacketV1Codec(payloadEncoded);\n  }\n  static fromBytes(payload) {\n    return new _PacketV1Codec(\"0x\" + Buffer.from(payload).toString(\"hex\"));\n  }\n  constructor(payloadEncoded) {\n    this.buffer = Buffer.from(trim0x(payloadEncoded), \"hex\");\n  }\n  /**\n   * encode packet to hex string\n   */\n  static encode(packet) {\n    const buff = this.encodeBytes(packet);\n    return \"0x\" + Buffer.from(buff).toString(\"hex\");\n  }\n  /**\n   * encode packet to Uint8Array\n   * @param packet\n   */\n  static encodeBytes(packet) {\n    const message = trim0x(packet.message);\n    const buffer = Buffer.alloc(MESSAGE_OFFSET + message.length / 2);\n    buffer.writeUInt8(packet.version, PACKET_VERSION_OFFSET);\n    buffer.writeBigUInt64BE(BigInt(packet.nonce), NONCE_OFFSET);\n    buffer.writeUInt32BE(packet.srcEid, SRC_CHAIN_OFFSET);\n    buffer.write(Buffer.from(addressToBytes32(packet.sender)).toString(\"hex\"), SRC_ADDRESS_OFFSET, 32, \"hex\");\n    buffer.writeUInt32BE(packet.dstEid, DST_CHAIN_OFFSET);\n    buffer.write(Buffer.from(addressToBytes32(packet.receiver)).toString(\"hex\"), DST_ADDRESS_OFFSET, 32, \"hex\");\n    buffer.write(trim0x(packet.guid), GUID_OFFSET, 32, \"hex\");\n    buffer.write(message, MESSAGE_OFFSET, message.length / 2, \"hex\");\n    return new Uint8Array(buffer);\n  }\n  version() {\n    return this.buffer.readUInt8(PACKET_VERSION_OFFSET);\n  }\n  nonce() {\n    return this.buffer.readBigUint64BE(NONCE_OFFSET).toString();\n  }\n  srcEid() {\n    return this.buffer.readUint32BE(SRC_CHAIN_OFFSET);\n  }\n  sender() {\n    return \"0x\" + this.buffer.slice(SRC_ADDRESS_OFFSET, DST_CHAIN_OFFSET).toString(\"hex\");\n  }\n  senderAddressB20() {\n    return bytes32ToEthAddress(this.sender());\n  }\n  dstEid() {\n    return this.buffer.readUint32BE(DST_CHAIN_OFFSET);\n  }\n  receiver() {\n    return \"0x\" + this.buffer.slice(DST_ADDRESS_OFFSET, GUID_OFFSET).toString(\"hex\");\n  }\n  receiverAddressB20() {\n    return bytes32ToEthAddress(this.receiver());\n  }\n  guid() {\n    return \"0x\" + this.buffer.slice(GUID_OFFSET, MESSAGE_OFFSET).toString(\"hex\");\n  }\n  message() {\n    return \"0x\" + this.buffer.slice(MESSAGE_OFFSET).toString(\"hex\");\n  }\n  payloadHash() {\n    return keccak256.keccak256(this.payload());\n  }\n  payload() {\n    return \"0x\" + this.buffer.slice(GUID_OFFSET).toString(\"hex\");\n  }\n  header() {\n    return \"0x\" + this.buffer.slice(0, GUID_OFFSET).toString(\"hex\");\n  }\n  headerHash() {\n    return keccak256.keccak256(this.header());\n  }\n  /**\n   * deserialize packet from hex string\n   * @deprecated use toPacket instead\n   */\n  decode() {\n    return this.toPacket();\n  }\n  toPacket() {\n    return {\n      version: this.version(),\n      nonce: this.nonce(),\n      srcEid: this.srcEid(),\n      sender: this.sender(),\n      dstEid: this.dstEid(),\n      receiver: this.receiver(),\n      guid: this.guid(),\n      message: this.message(),\n      // derived\n      payload: this.payload()\n    };\n  }\n};\nfunction calculateGuid(packetHead) {\n  return keccak256.keccak256(\n    solidity.pack(\n      [\"uint64\", \"uint32\", \"bytes32\", \"uint32\", \"bytes32\"],\n      [\n        bignumber.BigNumber.from(packetHead.nonce),\n        packetHead.srcEid,\n        addressToBytes32(packetHead.sender),\n        packetHead.dstEid,\n        addressToBytes32(packetHead.receiver)\n      ]\n    )\n  );\n}\n\n// src/codec/packet-serializer.ts\nvar PacketSerializer = class {\n  static serialize(packet) {\n    return PacketV1Codec.encode(packet);\n  }\n  static serializeBytes(packet) {\n    return PacketV1Codec.encodeBytes(packet);\n  }\n  static deserialize(bytesLike) {\n    let codec;\n    if (bytesLike instanceof Uint8Array) {\n      codec = PacketV1Codec.fromBytes(bytesLike);\n    } else {\n      codec = PacketV1Codec.from(bytesLike);\n    }\n    return codec.toPacket();\n  }\n};\n\nObject.defineProperty(exports, \"keccak256\", ({\n  enumerable: true,\n  get: function () { return keccak256.keccak256; }\n}));\nexports.ExecutorOptionType = ExecutorOptionType;\nexports.OptionType = OptionType;\nexports.Options = Options;\nexports.PacketSerializer = PacketSerializer;\nexports.PacketV1Codec = PacketV1Codec;\nexports.VerifierOptionType = VerifierOptionType;\nexports.WorkerId = WorkerId;\nexports.addressToBytes32 = addressToBytes32;\nexports.bytes32ToEthAddress = bytes32ToEthAddress;\nexports.calculateGuid = calculateGuid;\nexports.hexZeroPadTo32 = hexZeroPadTo32;\nexports.isSolanaAddress = isSolanaAddress;\nexports.optionsType1 = optionsType1;\nexports.optionsType2 = optionsType2;\nexports.packetToMessageOrigin = packetToMessageOrigin;\nexports.parseError = parseError;\nexports.parsePrecrimeConfig = parsePrecrimeConfig;\nexports.trim0x = trim0x;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/dist/index.cjs\n");

/***/ })

};
;
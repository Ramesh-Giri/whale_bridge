/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-block-tracker";
exports.ids = ["vendor-chunks/eth-block-tracker"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-block-tracker/src/base.js":
/*!****************************************************!*\
  !*** ./node_modules/eth-block-tracker/src/base.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EthQuery = __webpack_require__(/*! eth-query */ \"(ssr)/./node_modules/eth-query/index.js\")\nconst pify = __webpack_require__(/*! pify */ \"(ssr)/./node_modules/pify/index.js\")\nconst SafeEventEmitter = __webpack_require__(/*! safe-event-emitter */ \"(ssr)/./node_modules/safe-event-emitter/index.js\")\n\nconst sec = 1000\n\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue\nconst blockTrackerEvents = ['sync', 'latest']\n\nclass BaseBlockTracker extends SafeEventEmitter {\n\n  //\n  // public\n  //\n\n  constructor (opts = {}) {\n    super()\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec\n    // state\n    this._blockResetTimeout\n    this._currentBlock = null\n    this._isRunning = false\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this)\n    this._onRemoveListener = this._onRemoveListener.bind(this)\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this)\n    // listen for handler changes\n    this._setupInternalEvents()\n  }\n\n  isRunning () {\n    return this._isRunning\n  }\n\n  getCurrentBlock () {\n    return this._currentBlock\n  }\n\n  async getLatestBlock () {\n    // return if available\n    if (this._currentBlock) return this._currentBlock\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve))\n    // return newly set current block\n    return latestBlock\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners (eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName)\n    } else {\n      super.removeAllListeners()\n    }\n    // re-add internal events\n    this._setupInternalEvents()\n    // trigger stop check just in case\n    this._onRemoveListener()\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start () {\n    // default behavior is noop\n  }\n\n  _end () {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents () {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener)\n    this.removeListener('removeListener', this._onRemoveListener)\n    // then add them\n    this.on('newListener', this._onNewListener)\n    this.on('removeListener', this._onRemoveListener)\n  }\n\n  _onNewListener (eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return\n    this._maybeStart()\n  }\n\n  _onRemoveListener (eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return\n    this._maybeEnd()\n  }\n\n  _maybeStart () {\n    if (this._isRunning) return\n    this._isRunning = true\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout()\n    this._start()\n  }\n\n  _maybeEnd () {\n    if (!this._isRunning) return\n    this._isRunning = false\n    this._setupBlockResetTimeout()\n    this._end()\n  }\n\n  _getBlockTrackerEventCount () {\n    return blockTrackerEvents\n      .map(eventName => this.listenerCount(eventName))\n      .reduce(calculateSum)\n  }\n\n  _newPotentialLatest (newBlock) {\n    const currentBlock = this._currentBlock\n    // only update if blok number is higher\n    if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return\n    this._setCurrentBlock(newBlock)\n  }\n\n  _setCurrentBlock (newBlock) {\n    const oldBlock = this._currentBlock\n    this._currentBlock = newBlock\n    this.emit('latest', newBlock)\n    this.emit('sync', { oldBlock, newBlock })\n  }\n\n  _setupBlockResetTimeout () {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout()\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref()\n    }\n  }\n\n  _cancelBlockResetTimeout () {\n    clearTimeout(this._blockResetTimeout)\n  }\n\n  _resetCurrentBlock () {\n    this._currentBlock = null\n  }\n\n}\n\nmodule.exports = BaseBlockTracker\n\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvc3JjL2Jhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMERBQVc7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLGdEQUFNO0FBQzNCLHlCQUF5QixtQkFBTyxDQUFDLDRFQUFvQjs7QUFFckQ7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGFsZS1icmlkZ2UvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvc3JjL2Jhc2UuanM/ZGYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFdGhRdWVyeSA9IHJlcXVpcmUoJ2V0aC1xdWVyeScpXG5jb25zdCBwaWZ5ID0gcmVxdWlyZSgncGlmeScpXG5jb25zdCBTYWZlRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnc2FmZS1ldmVudC1lbWl0dGVyJylcblxuY29uc3Qgc2VjID0gMTAwMFxuXG5jb25zdCBjYWxjdWxhdGVTdW0gPSAoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4gYWNjdW11bGF0b3IgKyBjdXJyZW50VmFsdWVcbmNvbnN0IGJsb2NrVHJhY2tlckV2ZW50cyA9IFsnc3luYycsICdsYXRlc3QnXVxuXG5jbGFzcyBCYXNlQmxvY2tUcmFja2VyIGV4dGVuZHMgU2FmZUV2ZW50RW1pdHRlciB7XG5cbiAgLy9cbiAgLy8gcHVibGljXG4gIC8vXG5cbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICAvLyBjb25maWdcbiAgICB0aGlzLl9ibG9ja1Jlc2V0RHVyYXRpb24gPSBvcHRzLmJsb2NrUmVzZXREdXJhdGlvbiB8fCAyMCAqIHNlY1xuICAgIC8vIHN0YXRlXG4gICAgdGhpcy5fYmxvY2tSZXNldFRpbWVvdXRcbiAgICB0aGlzLl9jdXJyZW50QmxvY2sgPSBudWxsXG4gICAgdGhpcy5faXNSdW5uaW5nID0gZmFsc2VcbiAgICAvLyBiaW5kIGZ1bmN0aW9ucyBmb3IgaW50ZXJuYWwgdXNlXG4gICAgdGhpcy5fb25OZXdMaXN0ZW5lciA9IHRoaXMuX29uTmV3TGlzdGVuZXIuYmluZCh0aGlzKVxuICAgIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIgPSB0aGlzLl9vblJlbW92ZUxpc3RlbmVyLmJpbmQodGhpcylcbiAgICB0aGlzLl9yZXNldEN1cnJlbnRCbG9jayA9IHRoaXMuX3Jlc2V0Q3VycmVudEJsb2NrLmJpbmQodGhpcylcbiAgICAvLyBsaXN0ZW4gZm9yIGhhbmRsZXIgY2hhbmdlc1xuICAgIHRoaXMuX3NldHVwSW50ZXJuYWxFdmVudHMoKVxuICB9XG5cbiAgaXNSdW5uaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNSdW5uaW5nXG4gIH1cblxuICBnZXRDdXJyZW50QmxvY2sgKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50QmxvY2tcbiAgfVxuXG4gIGFzeW5jIGdldExhdGVzdEJsb2NrICgpIHtcbiAgICAvLyByZXR1cm4gaWYgYXZhaWxhYmxlXG4gICAgaWYgKHRoaXMuX2N1cnJlbnRCbG9jaykgcmV0dXJuIHRoaXMuX2N1cnJlbnRCbG9ja1xuICAgIC8vIHdhaXQgZm9yIGEgbmV3IGxhdGVzdCBibG9ja1xuICAgIGNvbnN0IGxhdGVzdEJsb2NrID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB0aGlzLm9uY2UoJ2xhdGVzdCcsIHJlc29sdmUpKVxuICAgIC8vIHJldHVybiBuZXdseSBzZXQgY3VycmVudCBibG9ja1xuICAgIHJldHVybiBsYXRlc3RCbG9ja1xuICB9XG5cbiAgLy8gZG9udCBhbGxvdyBtb2R1bGUgY29uc3VtZXIgdG8gcmVtb3ZlIG91ciBpbnRlcm5hbCBldmVudCBsaXN0ZW5lcnNcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzIChldmVudE5hbWUpIHtcbiAgICAvLyBwZXJmb3JtIGRlZmF1bHQgYmVoYXZpb3IsIHByZXNlcnZlIGZuIGFyaXR5XG4gICAgaWYgKGV2ZW50TmFtZSkge1xuICAgICAgc3VwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKClcbiAgICB9XG4gICAgLy8gcmUtYWRkIGludGVybmFsIGV2ZW50c1xuICAgIHRoaXMuX3NldHVwSW50ZXJuYWxFdmVudHMoKVxuICAgIC8vIHRyaWdnZXIgc3RvcCBjaGVjayBqdXN0IGluIGNhc2VcbiAgICB0aGlzLl9vblJlbW92ZUxpc3RlbmVyKClcbiAgfVxuXG4gIC8vXG4gIC8vIHRvIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzXG4gIC8vXG5cbiAgX3N0YXJ0ICgpIHtcbiAgICAvLyBkZWZhdWx0IGJlaGF2aW9yIGlzIG5vb3BcbiAgfVxuXG4gIF9lbmQgKCkge1xuICAgIC8vIGRlZmF1bHQgYmVoYXZpb3IgaXMgbm9vcFxuICB9XG5cbiAgLy9cbiAgLy8gcHJpdmF0ZVxuICAvL1xuXG4gIF9zZXR1cEludGVybmFsRXZlbnRzICgpIHtcbiAgICAvLyBmaXJzdCByZW1vdmUgbGlzdGVuZXJzIGZvciBpZGVtcG90ZW5jZVxuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ25ld0xpc3RlbmVyJywgdGhpcy5fb25OZXdMaXN0ZW5lcilcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdyZW1vdmVMaXN0ZW5lcicsIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIpXG4gICAgLy8gdGhlbiBhZGQgdGhlbVxuICAgIHRoaXMub24oJ25ld0xpc3RlbmVyJywgdGhpcy5fb25OZXdMaXN0ZW5lcilcbiAgICB0aGlzLm9uKCdyZW1vdmVMaXN0ZW5lcicsIHRoaXMuX29uUmVtb3ZlTGlzdGVuZXIpXG4gIH1cblxuICBfb25OZXdMaXN0ZW5lciAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgLy8gYG5ld0xpc3RlbmVyYCBpcyBjYWxsZWQgKmJlZm9yZSogdGhlIGxpc3RlbmVyIGlzIGFkZGVkXG4gICAgaWYgKCFibG9ja1RyYWNrZXJFdmVudHMuaW5jbHVkZXMoZXZlbnROYW1lKSkgcmV0dXJuXG4gICAgdGhpcy5fbWF5YmVTdGFydCgpXG4gIH1cblxuICBfb25SZW1vdmVMaXN0ZW5lciAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgLy8gYHJlbW92ZUxpc3RlbmVyYCBpcyBjYWxsZWQgKmFmdGVyKiB0aGUgbGlzdGVuZXIgaXMgcmVtb3ZlZFxuICAgIGlmICh0aGlzLl9nZXRCbG9ja1RyYWNrZXJFdmVudENvdW50KCkgPiAwKSByZXR1cm5cbiAgICB0aGlzLl9tYXliZUVuZCgpXG4gIH1cblxuICBfbWF5YmVTdGFydCAoKSB7XG4gICAgaWYgKHRoaXMuX2lzUnVubmluZykgcmV0dXJuXG4gICAgdGhpcy5faXNSdW5uaW5nID0gdHJ1ZVxuICAgIC8vIGNhbmNlbCBzZXR0aW5nIGxhdGVzdCBibG9jayB0byBzdGFsZVxuICAgIHRoaXMuX2NhbmNlbEJsb2NrUmVzZXRUaW1lb3V0KClcbiAgICB0aGlzLl9zdGFydCgpXG4gIH1cblxuICBfbWF5YmVFbmQgKCkge1xuICAgIGlmICghdGhpcy5faXNSdW5uaW5nKSByZXR1cm5cbiAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZVxuICAgIHRoaXMuX3NldHVwQmxvY2tSZXNldFRpbWVvdXQoKVxuICAgIHRoaXMuX2VuZCgpXG4gIH1cblxuICBfZ2V0QmxvY2tUcmFja2VyRXZlbnRDb3VudCAoKSB7XG4gICAgcmV0dXJuIGJsb2NrVHJhY2tlckV2ZW50c1xuICAgICAgLm1hcChldmVudE5hbWUgPT4gdGhpcy5saXN0ZW5lckNvdW50KGV2ZW50TmFtZSkpXG4gICAgICAucmVkdWNlKGNhbGN1bGF0ZVN1bSlcbiAgfVxuXG4gIF9uZXdQb3RlbnRpYWxMYXRlc3QgKG5ld0Jsb2NrKSB7XG4gICAgY29uc3QgY3VycmVudEJsb2NrID0gdGhpcy5fY3VycmVudEJsb2NrXG4gICAgLy8gb25seSB1cGRhdGUgaWYgYmxvayBudW1iZXIgaXMgaGlnaGVyXG4gICAgaWYgKGN1cnJlbnRCbG9jayAmJiAoaGV4VG9JbnQobmV3QmxvY2spIDw9IGhleFRvSW50KGN1cnJlbnRCbG9jaykpKSByZXR1cm5cbiAgICB0aGlzLl9zZXRDdXJyZW50QmxvY2sobmV3QmxvY2spXG4gIH1cblxuICBfc2V0Q3VycmVudEJsb2NrIChuZXdCbG9jaykge1xuICAgIGNvbnN0IG9sZEJsb2NrID0gdGhpcy5fY3VycmVudEJsb2NrXG4gICAgdGhpcy5fY3VycmVudEJsb2NrID0gbmV3QmxvY2tcbiAgICB0aGlzLmVtaXQoJ2xhdGVzdCcsIG5ld0Jsb2NrKVxuICAgIHRoaXMuZW1pdCgnc3luYycsIHsgb2xkQmxvY2ssIG5ld0Jsb2NrIH0pXG4gIH1cblxuICBfc2V0dXBCbG9ja1Jlc2V0VGltZW91dCAoKSB7XG4gICAgLy8gY2xlYXIgYW55IGV4aXN0aW5nIHRpbWVvdXRcbiAgICB0aGlzLl9jYW5jZWxCbG9ja1Jlc2V0VGltZW91dCgpXG4gICAgLy8gY2xlYXIgbGF0ZXN0IGJsb2NrIHdoZW4gc3RhbGVcbiAgICB0aGlzLl9ibG9ja1Jlc2V0VGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fcmVzZXRDdXJyZW50QmxvY2ssIHRoaXMuX2Jsb2NrUmVzZXREdXJhdGlvbilcbiAgICAvLyBub2RlanMgLSBkb250IGhvbGQgcHJvY2VzcyBvcGVuXG4gICAgaWYgKHRoaXMuX2Jsb2NrUmVzZXRUaW1lb3V0LnVucmVmKSB7XG4gICAgICB0aGlzLl9ibG9ja1Jlc2V0VGltZW91dC51bnJlZigpXG4gICAgfVxuICB9XG5cbiAgX2NhbmNlbEJsb2NrUmVzZXRUaW1lb3V0ICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fYmxvY2tSZXNldFRpbWVvdXQpXG4gIH1cblxuICBfcmVzZXRDdXJyZW50QmxvY2sgKCkge1xuICAgIHRoaXMuX2N1cnJlbnRCbG9jayA9IG51bGxcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUJsb2NrVHJhY2tlclxuXG5mdW5jdGlvbiBoZXhUb0ludChoZXhJbnQpIHtcbiAgcmV0dXJuIE51bWJlci5wYXJzZUludChoZXhJbnQsIDE2KVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/src/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/src/polling.js":
/*!*******************************************************!*\
  !*** ./node_modules/eth-block-tracker/src/polling.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const pify = __webpack_require__(/*! pify */ \"(ssr)/./node_modules/pify/index.js\")\nconst BaseBlockTracker = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/eth-block-tracker/src/base.js\")\n\nconst sec = 1000\n\nclass PollingBlockTracker extends BaseBlockTracker {\n\n  constructor (opts = {}) {\n    // parse + validate args\n    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')\n    const pollingInterval = opts.pollingInterval || 20 * sec\n    const retryTimeout = opts.retryTimeout || pollingInterval / 10\n    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false\n    // BaseBlockTracker constructor\n    super(Object.assign({\n      blockResetDuration: pollingInterval,\n    }, opts))\n    // config\n    this._provider = opts.provider\n    this._pollingInterval = pollingInterval\n    this._retryTimeout = retryTimeout\n    this._keepEventLoopActive = keepEventLoopActive\n    this._setSkipCacheFlag = setSkipCacheFlag\n  }\n\n  //\n  // public\n  //\n\n  // trigger block polling\n  async checkForLatestBlock () {\n    await this._updateLatestBlock()\n    return await this.getLatestBlock()\n  }\n\n  //\n  // private\n  //\n\n  _start () {\n    this._performSync().catch(err => this.emit('error', err))\n  }\n\n  async _performSync () {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock()\n        await timeout(this._pollingInterval, !this._keepEventLoopActive)\n      } catch (err) {\n        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`)\n        try {\n          this.emit('error', newErr)\n        } catch (emitErr) {\n          console.error(newErr)\n        }\n        await timeout(this._retryTimeout, !this._keepEventLoopActive)\n      }\n    }\n  }\n\n  async _updateLatestBlock () {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock()\n    this._newPotentialLatest(latestBlock)\n  }\n\n  async _fetchLatestBlock () {\n    const req = { jsonrpc: \"2.0\", id: 1, method: 'eth_blockNumber', params: [] }\n    if (this._setSkipCacheFlag) req.skipCache = true\n    const res = await pify((cb) => this._provider.sendAsync(req, cb))()\n    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error}`)\n    return res.result\n  }\n\n}\n\nmodule.exports = PollingBlockTracker\n\nfunction timeout (duration, unref) {\n  return new Promise(resolve => {\n    const timoutRef = setTimeout(resolve, duration)\n    // don't keep process open\n    if (timoutRef.unref && unref) {\n      timoutRef.unref()\n    }\n  })\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvc3JjL3BvbGxpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLGdEQUFNO0FBQzNCLHlCQUF5QixtQkFBTyxDQUFDLGtFQUFROztBQUV6Qzs7QUFFQTs7QUFFQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUix5SEFBeUgsVUFBVTtBQUNuSTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSwrRkFBK0YsVUFBVTtBQUN6RztBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2hhbGUtYnJpZGdlLy4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL3NyYy9wb2xsaW5nLmpzP2FjNTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGlmeSA9IHJlcXVpcmUoJ3BpZnknKVxuY29uc3QgQmFzZUJsb2NrVHJhY2tlciA9IHJlcXVpcmUoJy4vYmFzZScpXG5cbmNvbnN0IHNlYyA9IDEwMDBcblxuY2xhc3MgUG9sbGluZ0Jsb2NrVHJhY2tlciBleHRlbmRzIEJhc2VCbG9ja1RyYWNrZXIge1xuXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICAvLyBwYXJzZSArIHZhbGlkYXRlIGFyZ3NcbiAgICBpZiAoIW9wdHMucHJvdmlkZXIpIHRocm93IG5ldyBFcnJvcignUG9sbGluZ0Jsb2NrVHJhY2tlciAtIG5vIHByb3ZpZGVyIHNwZWNpZmllZC4nKVxuICAgIGNvbnN0IHBvbGxpbmdJbnRlcnZhbCA9IG9wdHMucG9sbGluZ0ludGVydmFsIHx8IDIwICogc2VjXG4gICAgY29uc3QgcmV0cnlUaW1lb3V0ID0gb3B0cy5yZXRyeVRpbWVvdXQgfHwgcG9sbGluZ0ludGVydmFsIC8gMTBcbiAgICBjb25zdCBrZWVwRXZlbnRMb29wQWN0aXZlID0gb3B0cy5rZWVwRXZlbnRMb29wQWN0aXZlICE9PSB1bmRlZmluZWQgPyBvcHRzLmtlZXBFdmVudExvb3BBY3RpdmUgOiB0cnVlXG4gICAgY29uc3Qgc2V0U2tpcENhY2hlRmxhZyA9IG9wdHMuc2V0U2tpcENhY2hlRmxhZyB8fCBmYWxzZVxuICAgIC8vIEJhc2VCbG9ja1RyYWNrZXIgY29uc3RydWN0b3JcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHtcbiAgICAgIGJsb2NrUmVzZXREdXJhdGlvbjogcG9sbGluZ0ludGVydmFsLFxuICAgIH0sIG9wdHMpKVxuICAgIC8vIGNvbmZpZ1xuICAgIHRoaXMuX3Byb3ZpZGVyID0gb3B0cy5wcm92aWRlclxuICAgIHRoaXMuX3BvbGxpbmdJbnRlcnZhbCA9IHBvbGxpbmdJbnRlcnZhbFxuICAgIHRoaXMuX3JldHJ5VGltZW91dCA9IHJldHJ5VGltZW91dFxuICAgIHRoaXMuX2tlZXBFdmVudExvb3BBY3RpdmUgPSBrZWVwRXZlbnRMb29wQWN0aXZlXG4gICAgdGhpcy5fc2V0U2tpcENhY2hlRmxhZyA9IHNldFNraXBDYWNoZUZsYWdcbiAgfVxuXG4gIC8vXG4gIC8vIHB1YmxpY1xuICAvL1xuXG4gIC8vIHRyaWdnZXIgYmxvY2sgcG9sbGluZ1xuICBhc3luYyBjaGVja0ZvckxhdGVzdEJsb2NrICgpIHtcbiAgICBhd2FpdCB0aGlzLl91cGRhdGVMYXRlc3RCbG9jaygpXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TGF0ZXN0QmxvY2soKVxuICB9XG5cbiAgLy9cbiAgLy8gcHJpdmF0ZVxuICAvL1xuXG4gIF9zdGFydCAoKSB7XG4gICAgdGhpcy5fcGVyZm9ybVN5bmMoKS5jYXRjaChlcnIgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGVycikpXG4gIH1cblxuICBhc3luYyBfcGVyZm9ybVN5bmMgKCkge1xuICAgIHdoaWxlICh0aGlzLl9pc1J1bm5pbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUxhdGVzdEJsb2NrKClcbiAgICAgICAgYXdhaXQgdGltZW91dCh0aGlzLl9wb2xsaW5nSW50ZXJ2YWwsICF0aGlzLl9rZWVwRXZlbnRMb29wQWN0aXZlKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IG5ld0VyciA9IG5ldyBFcnJvcihgUG9sbGluZ0Jsb2NrVHJhY2tlciAtIGVuY291bnRlcmVkIGFuIGVycm9yIHdoaWxlIGF0dGVtcHRpbmcgdG8gdXBkYXRlIGxhdGVzdCBibG9jazpcXG4ke2Vyci5zdGFja31gKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXdFcnIpXG4gICAgICAgIH0gY2F0Y2ggKGVtaXRFcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG5ld0VycilcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aW1lb3V0KHRoaXMuX3JldHJ5VGltZW91dCwgIXRoaXMuX2tlZXBFdmVudExvb3BBY3RpdmUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZUxhdGVzdEJsb2NrICgpIHtcbiAgICAvLyBmZXRjaCArIHNldCBsYXRlc3QgYmxvY2tcbiAgICBjb25zdCBsYXRlc3RCbG9jayA9IGF3YWl0IHRoaXMuX2ZldGNoTGF0ZXN0QmxvY2soKVxuICAgIHRoaXMuX25ld1BvdGVudGlhbExhdGVzdChsYXRlc3RCbG9jaylcbiAgfVxuXG4gIGFzeW5jIF9mZXRjaExhdGVzdEJsb2NrICgpIHtcbiAgICBjb25zdCByZXEgPSB7IGpzb25ycGM6IFwiMi4wXCIsIGlkOiAxLCBtZXRob2Q6ICdldGhfYmxvY2tOdW1iZXInLCBwYXJhbXM6IFtdIH1cbiAgICBpZiAodGhpcy5fc2V0U2tpcENhY2hlRmxhZykgcmVxLnNraXBDYWNoZSA9IHRydWVcbiAgICBjb25zdCByZXMgPSBhd2FpdCBwaWZ5KChjYikgPT4gdGhpcy5fcHJvdmlkZXIuc2VuZEFzeW5jKHJlcSwgY2IpKSgpXG4gICAgaWYgKHJlcy5lcnJvcikgdGhyb3cgbmV3IEVycm9yKGBQb2xsaW5nQmxvY2tUcmFja2VyIC0gZW5jb3VudGVyZWQgZXJyb3IgZmV0Y2hpbmcgYmxvY2s6XFxuJHtyZXMuZXJyb3J9YClcbiAgICByZXR1cm4gcmVzLnJlc3VsdFxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nQmxvY2tUcmFja2VyXG5cbmZ1bmN0aW9uIHRpbWVvdXQgKGR1cmF0aW9uLCB1bnJlZikge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgY29uc3QgdGltb3V0UmVmID0gc2V0VGltZW91dChyZXNvbHZlLCBkdXJhdGlvbilcbiAgICAvLyBkb24ndCBrZWVwIHByb2Nlc3Mgb3BlblxuICAgIGlmICh0aW1vdXRSZWYudW5yZWYgJiYgdW5yZWYpIHtcbiAgICAgIHRpbW91dFJlZi51bnJlZigpXG4gICAgfVxuICB9KVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/src/polling.js\n");

/***/ })

};
;